HTML:

<!DOCTYPE html>

<html lang="en" dir="ltr">

<head>
  <meta charset="utf-8">
  <title>Todo web page</title>
  <link rel="stylesheet" href="style.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.0/css/line.css">
</head>

<body>
  <h1>TO-DO WEBPAGE</h1>
  <div class="wrapper">
    <div class="task-input">
      <img src="icons8-bars-24.png" alt="icon">
      <input type="text" placeholder="Add a new task">
    </div>
    <div class="controls">
      <div class="filters">
        <span class="active" id="all">All</span>
        <span id="pending">Pending</span>
        <span id="completed">Completed</span>
      </div>
      <button class="clear-btn">Clear All</button>
    </div>
    <ul class="task-box"></ul>
  </div>
  <script src="script.js"></script>
</body>

</html>



CSS:

html, body {
  height: 100%;
  width: 100%;
}

*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins',sans-serif;
}

h1{
  font-family: Verdana;
  max-width: 700px;
  margin: auto;
  height: 100px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: lightblue;
  position: relative;
}

body{
  width: 100%;
  height: 100vh;
  overflow: hidden;
  background: linear-gradient(135deg,red,blue);
}
::selection{
  color: #fff;
  background: #3C87FF;
}

.wrapper{
  max-width: 405px;
  margin: 135px auto;
  background: #fff;
  border-radius: 7px;
  padding: 28px 0;
}

.task-input{
  height: 52px;
  padding: 0 25px;
  position: relative;
  }
.task-input img{
  position: absolute;
  top: 50%;
  transform: translate(17px,-50%);
}
.task-input input{
  height: 100%;
  width: 100%;
  outline: none;
  font-size: 18px;
  border-radius: 5px;
  border: 1px solid #999;
  padding: 0 20px 0 53px;
  
  }

.task-input input::placeholder{
  color: #bfbfbf;
}
.controls, li{
  display: flex;
  align-content: center;
  justify-content: space-between;
}

.controls{
  padding: 18px 25px;
  border-bottom: 1px solid #ccc;
}

.filters span{
  cursor: pointer;
  margin: 0 8px;
  font-size: 17px;
  }

.filters span:first-child{
  margin-left: 0;
}
.filters span.active{
  color: #3c87ff;
}
.controls .clear-btn{
  outline: none;
  border: none;
  color: #fff;
  cursor: pointer;
  font-size: 13px;
  border-radius: 4px;
  padding: 17px 13px;
  background: #3c87ff;
}

.task-box{
  margin: 20px 25px;
}

.task-box .task{
  list-style: none;
  font-size: 17px;
  margin-bottom: 18px;
  padding-bottom: 16px;
  border-bottom:1px solid #ccc;
}

.task-box .task:list-child{
  margin-bottom: 0;
  border-bottom: 0;
  padding-bottom: 0;
}

.task label{
  display: flex;
}

.task label input{
  margin-top:6px;
  margin-right: ;
}

.task .settings{
  position: relative;
  cursor: pointer;
}

.settings .task-menu{
  position: absolute;
  background: #fff;
  z-index: 2;
  right: -5px;
  bottom: -65px;
  transform: scale(0);
  padding: 5px 0;
  border-radius: 4px;
  transform-origin: top right;
  transition: transform 0.2 ease;
  box-shadow: 0 0 6px rgba(0,0,0,0.15);
}

.settings:hover .task-menu{
  transform: scale(1);
}

.task-menu li{
  height: 25px;
  font-size: 16px;
  padding: 17px 15px;
  margin-bottom: 2px;
  justify-content: flex-start;
}

.task-menu li:last-child{
  margin-bottom: 0;
}

.task-menu li:hover{
  background: #f5f5f5;
}

.task-menu li i{
  padding-right: 8px;
}

@media (max-width: 400px) {
  body{
    padding: 0 10px;
  }
  
  .wrapper {
    padding: 20px 0;
  }
  
  .filters span{
    margin: 0 5px;
  }
  
  .task-input{
    padding: 0 20px;
  }
  
  .controls{
    padding: 18px 20px;
  }
  
  .task-box{
    margin-top: 20px;
    margin-right: 5px;
    padding: 0 15px 10px 20px;
  }
  
  .task label input{
    margin-top: 4px;
  }
}


JS:

const taskInput = document.querySelector(".task-input input"),
filters = document.querySelectorAll(".filters span"),
clearAll = document.querySelector(".clear-btn"),
taskBox = document.querySelector(".task-box");

let editId,
isEditTask = false,
todos = JSON.parse(localStorage.getItem("todo-list"));

filters.forEach(btn => {
    btn.addEventListener("click", () => {
        document.querySelector("span.active").classList.remove("active");
        btn.classList.add("active");
        showTodo(btn.id);
    });
});

function showTodo(filter) {
    let liTag = "";
    if(todos) {
        todos.forEach((todo, id) => {
            let completed = todo.status == "completed" ? "checked" : "";
            if(filter == todo.status || filter == "all") {
                liTag += `<li class="task">
                            <label for="${id}">
                                <input onclick="updateStatus(this)" type="checkbox" id="${id}" ${completed}>
                                <p class="${completed}">${todo.name}</p>
                            </label>
                            <div class="settings">
                                <i onclick="showMenu(this)" class="uil uil-ellipsis-h"></i>
                                <ul class="task-menu">
                                    <li onclick='editTask(${id}, "${todo.name}")'><i class="uil uil-pen"></i>Edit</li>
                                    <li onclick='deleteTask(${id}, "${filter}")'><i class="uil uil-trash"></i>Delete</li>
                                </ul>
                            </div>
                        </li>`;
            }
        });
    }
    taskBox.innerHTML = liTag || `<span>You don't have any task here</span>`;
    let checkTask = taskBox.querySelectorAll(".task");
    !checkTask.length ? clearAll.classList.remove("active") : clearAll.classList.add("active");
    taskBox.offsetHeight >= 300 ? taskBox.classList.add("overflow") : taskBox.classList.remove("overflow");
}
showTodo("all");

function showMenu(selectedTask) {
    let menuDiv = selectedTask.parentElement.lastElementChild;
    menuDiv.classList.add("show");
    document.addEventListener("click", e => {
        if(e.target.tagName != "I" || e.target != selectedTask) {
            menuDiv.classList.remove("show");
        }
    });
}

function updateStatus(selectedTask) {
    let taskName = selectedTask.parentElement.lastElementChild;
    if(selectedTask.checked) {
        taskName.classList.add("checked");
        todos[selectedTask.id].status = "completed";
    } else {
        taskName.classList.remove("checked");
        todos[selectedTask.id].status = "pending";
    }
    localStorage.setItem("todo-list", JSON.stringify(todos))
}

function editTask(taskId, textName) {
    editId = taskId;
    isEditTask = true;
    taskInput.value = textName;
    taskInput.focus();
    taskInput.classList.add("active");
}

function deleteTask(deleteId, filter) {
    isEditTask = false;
    todos.splice(deleteId, 1);
    localStorage.setItem("todo-list", JSON.stringify(todos));
    showTodo(filter);
}

clearAll.addEventListener("click", () => {
    isEditTask = false;
    todos.splice(0, todos.length);
    localStorage.setItem("todo-list", JSON.stringify(todos));
    showTodo()
});

taskInput.addEventListener("keyup", e => {
    let userTask = taskInput.value.trim();
    if(e.key == "Enter" && userTask) {
        if(!isEditTask) {
            todos = !todos ? [] : todos;
            let taskInfo = {name: userTask, status: "pending"};
            todos.push(taskInfo);
        } else {
            isEditTask = false;
            todos[editId].name = userTask;
        }
        taskInput.value = "";
        localStorage.setItem("todo-list", JSON.stringify(todos));
        showTodo(document.querySelector("span.active").id);
    }
});
